// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSExample {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.ECS.Components;
    using uFrame.Json;
    using uFrameECSExample;
    using UniRx;
    using UnityEngine;
    
    
    [uFrame.Attributes.ComponentId(2)]
    [uFrame.Attributes.uFrameIdentifier("73980efd-f17e-47e3-a372-4a555cc76459")]
    public partial class Gun : uFrame.ECS.Components.EcsComponent {
        
        [UnityEngine.SerializeField()]
        private Single _FireRate;
        
        [UnityEngine.SerializeField()]
        private Single _NextFire;
        
        [UnityEngine.SerializeField()]
        private GameObject _ProjectilePrefab;
        
        [UnityEngine.SerializeField()]
        private GunState _State;
        
        private Subject<PropertyChangedEvent<Single>> _FireRateObservable;
        
        private PropertyChangedEvent<Single> _FireRateEvent;
        
        private Subject<PropertyChangedEvent<Single>> _NextFireObservable;
        
        private PropertyChangedEvent<Single> _NextFireEvent;
        
        private Subject<PropertyChangedEvent<GameObject>> _ProjectilePrefabObservable;
        
        private PropertyChangedEvent<GameObject> _ProjectilePrefabEvent;
        
        private Subject<PropertyChangedEvent<GunState>> _StateObservable;
        
        private PropertyChangedEvent<GunState> _StateEvent;
        
        public override int ComponentId {
            get {
                return 2;
            }
        }
        
        public IObservable<PropertyChangedEvent<Single>> FireRateObservable {
            get {
                return _FireRateObservable ?? (_FireRateObservable = new Subject<PropertyChangedEvent<Single>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<Single>> NextFireObservable {
            get {
                return _NextFireObservable ?? (_NextFireObservable = new Subject<PropertyChangedEvent<Single>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<GameObject>> ProjectilePrefabObservable {
            get {
                return _ProjectilePrefabObservable ?? (_ProjectilePrefabObservable = new Subject<PropertyChangedEvent<GameObject>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<GunState>> StateObservable {
            get {
                return _StateObservable ?? (_StateObservable = new Subject<PropertyChangedEvent<GunState>>());
            }
        }
        
        public Single FireRate {
            get {
                return _FireRate;
            }
            set {
                SetFireRate(value);
            }
        }
        
        public Single NextFire {
            get {
                return _NextFire;
            }
            set {
                SetNextFire(value);
            }
        }
        
        public GameObject ProjectilePrefab {
            get {
                return _ProjectilePrefab;
            }
            set {
                SetProjectilePrefab(value);
            }
        }
        
        public GunState State {
            get {
                return _State;
            }
            set {
                SetState(value);
            }
        }
        
        public virtual void SetFireRate(Single value) {
            SetProperty(ref _FireRate, value, ref _FireRateEvent, _FireRateObservable);
        }
        
        public virtual void SetNextFire(Single value) {
            SetProperty(ref _NextFire, value, ref _NextFireEvent, _NextFireObservable);
        }
        
        public virtual void SetProjectilePrefab(GameObject value) {
            SetProperty(ref _ProjectilePrefab, value, ref _ProjectilePrefabEvent, _ProjectilePrefabObservable);
        }
        
        public virtual void SetState(GunState value) {
            SetProperty(ref _State, value, ref _StateEvent, _StateObservable);
        }
    }
}
