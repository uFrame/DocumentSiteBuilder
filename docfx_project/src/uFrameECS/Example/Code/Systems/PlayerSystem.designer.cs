// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSExample {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using uFrameECSExample;
    using UniRx;
    using UnityEngine;
    
    
    public partial class PlayerSystemBase : uFrame.ECS.Systems.EcsSystem {
        
        private IEcsComponentManagerOf<PlayerGunner> _PlayerGunnerManager;
        
        private IEcsComponentManagerOf<Movable> _MovableManager;
        
        private IEcsComponentManagerOf<Hazard> _HazardManager;
        
        private IEcsComponentManagerOf<WavesGame> _WavesGameManager;
        
        private IEcsComponentManagerOf<Player> _PlayerManager;
        
        public IEcsComponentManagerOf<PlayerGunner> PlayerGunnerManager {
            get {
                return _PlayerGunnerManager;
            }
            set {
                _PlayerGunnerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Movable> MovableManager {
            get {
                return _MovableManager;
            }
            set {
                _MovableManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Hazard> HazardManager {
            get {
                return _HazardManager;
            }
            set {
                _HazardManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WavesGame> WavesGameManager {
            get {
                return _WavesGameManager;
            }
            set {
                _WavesGameManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Player> PlayerManager {
            get {
                return _PlayerManager;
            }
            set {
                _PlayerManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            PlayerGunnerManager = ComponentSystem.RegisterGroup<PlayerGunnerGroup,PlayerGunner>();
            MovableManager = ComponentSystem.RegisterComponent<Movable>(23);
            HazardManager = ComponentSystem.RegisterComponent<Hazard>(9);
            WavesGameManager = ComponentSystem.RegisterComponent<WavesGame>(15);
            PlayerManager = ComponentSystem.RegisterComponent<Player>(22);
            PlayerGunnerManager.CreatedObservable.Subscribe(PlayerGunnerCreatedFilter).DisposeWith(this);
            this.OnEvent<uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher>().Subscribe(_=>{ PlayerSystemOnCollisionEnterFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrameECSExample.GameOver>().Subscribe(_=>{ PlayerSystemGameOverFilter(_); }).DisposeWith(this);
            PlayerGunnerManager.RemovedObservable.Subscribe(_=>PlayerGunnerComponentDestroyed(_,_)).DisposeWith(this);
        }
        
        protected virtual void PlayerGunnerCreated(PlayerGunner data, PlayerGunner group) {
            var handler = new PlayerGunnerCreated();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void PlayerGunnerCreatedFilter(PlayerGunner data) {
            var GroupItem = PlayerGunnerManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.PlayerGunnerCreated(data, GroupItem);
        }
        
        protected virtual void PlayerSystemOnCollisionEnterHandler(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data, Hazard collider, PlayerGunner source) {
            var handler = new PlayerSystemOnCollisionEnterHandler();
            handler.System = this;
            handler.Event = data;
            handler.Collider = collider;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void PlayerSystemOnCollisionEnterFilter(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data) {
            var ColliderHazard = HazardManager[data.ColliderId];
            if (ColliderHazard == null) {
                return;
            }
            if (!ColliderHazard.Enabled) {
                return;
            }
            var SourceItem = PlayerGunnerManager[data.EntityId];
            if (SourceItem == null) {
                return;
            }
            if (!SourceItem.Enabled) {
                return;
            }
            this.PlayerSystemOnCollisionEnterHandler(data, ColliderHazard, SourceItem);
        }
        
        protected virtual void PlayerSystemGameOverHandler(uFrameECSExample.GameOver data, WavesGame group) {
            var handler = new PlayerSystemGameOverHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void PlayerSystemGameOverFilter(uFrameECSExample.GameOver data) {
            var WavesGameItems = WavesGameManager.Components;
            for (var WavesGameIndex = 0
            ; WavesGameIndex < WavesGameItems.Count; WavesGameIndex++
            ) {
                if (!WavesGameItems[WavesGameIndex].Enabled) {
                    continue;
                }
                this.PlayerSystemGameOverHandler(data, WavesGameItems[WavesGameIndex]);
            }
        }
        
        protected virtual void PlayerGunnerComponentDestroyed(PlayerGunner data, PlayerGunner group) {
            var handler = new PlayerGunnerComponentDestroyed();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void PlayerGunnerComponentDestroyedFilter(PlayerGunner data) {
            var GroupItem = PlayerGunnerManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.PlayerGunnerComponentDestroyed(data, GroupItem);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("d68a4ba9-4514-4ff6-87d0-d6b45dcda8cd")]
    public partial class PlayerSystem : PlayerSystemBase {
        
        private static PlayerSystem _Instance;
        
        public PlayerSystem() {
            Instance = this;
        }
        
        public static PlayerSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
